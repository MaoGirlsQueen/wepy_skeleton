<template>
  <view class="container">
    {{msg}}

    <button class='btn' @tap='toSign'>去打卡页</button>
    <Modal></Modal>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import common from '../common/common'
  import Modal from '../components/Modal'
  import {trycatch} from '../common/decorator'
  import { bindEvent, removeAllEvent } from '../common/bindEvent'
  import storage from '../common/storage'
  import api from '../common/api'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'index'
    }
    components = {
      Modal
    }
    data = {
      msg: 'index'
    }
    computed = {
    }
    methods = {
      toSign() {
        this.$navigate('./sign')
      }
    }

    async onLoad() {
      console.log('onLoad')

      // await storage.set('test', 'test')

      // await storage.get('test')

      // await storage.clear()

      // 移除所有Event
      removeAllEvent()
      // 绑定Event
      bindEvent('answer-start', {maxCount: 2, fn: () => this.answerStart()})

      setTimeout(() => {
        bindEvent('answer-start', {maxCount: 2, fn: () => this.answerStart()})
      }, 2000)
    }

    @trycatch()
    async onShow() {
      console.log('onShow')
      await this.login()
    }

    async login() {
      const storageToken = await storage.get('token')
      if (!storageToken) {
        const { code } = await wepy.login() // 获取code
        const {rawData, encryptedData, iv} = await wepy.getUserInfo()  // 获取用户昵称等信息
        const { nickName: nickname, avatarUrl: portrait } = JSON.parse(rawData)
        const fromWhere = this.$parent.globalData.scene
        const openId = await api.getOpenId({code, fromWhere})  // 获取openId
        const {token} = await api.login({ openId, nickname, portrait, encryptedData, iv, fromWhere }) // 获取token 缓存本地
        await storage.set('token', token)
      }
    }

    answerStart() {
      console.log('answerStart')
    }

    onHide() {
      console.log('onHide')
    }
    onUnload() {
      console.log('onUnload')
    }

    // 【config】错误处理
    async handleError(error) {
      // 未授权
      if (error.errMsg.includes('getUserInfo')) {
        this.$redirect('./auth')
        return
      }
       // token失效
      if (error.status === 1000) {
        if (await storage.get('token')) {
          await storage.clear()
        }
        this.onShow()
        return
      }

      // msg: 弹窗显示错误信息
      // btnMsg：弹窗按钮文案
      // cb：点击弹窗按钮后执行的函数
      let msg = common.getErrorWarnMsg(error.errMsg)
      this.$invoke('Modal', 'showModal', { msg, btnMsg: '重新加载', cb: () => { this.onLoad() } })
    }
  }
</script>

<style lang="less">
.btn {
  margin-top: 100rpx;
  width: 630rpx;
  height: 100rpx;
  line-height:100rpx;
  border-radius: 50rpx;
  font-size: 36rpx;
  font-weight:bold;
  background: #2B9FFC;
  color:#fff;
}
</style>
